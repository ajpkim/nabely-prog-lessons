#+TITLE: Lesson 1: Computing, Data Types, & Variables
#+DATE: 2024-03-13

* The Story of Computing 1.0
** Aristotle and the Greeks: Early foundations of logical reasoning

"All men are mortal. Socrates is a man. *Therefore Socrates is mortal*."

Aristotle's formulation of syllogistic logic provided a systematic framework for reasoning, laying the groundwork for what we now understand as algorithmic thinking. In this context, the logical rules we follow can be likened to an algorithm, the premises "All men are mortal" and "Socrates is a man" can be seen as data or inputs, and the process of deriving the conclusion from these inputs according to the rules is a form of computation.

This foundational approach to formalizing reasoning would significantly influence the development of systematic methods for uncovering truths and performing calculations. Over time, this quest for structured logic paved the way for the creation of machines designed to carry out logical computations, eventually leading to the development of modern computers.

It's crucial to understand that computation is an abstract concept related to the processing of information. This abstraction allows us to perceive computation in various forms: from natural processes in biological systems and the deductive algorithms in mathematics and logic, to the operations performed by the physical computers we use daily.

Understanding abstraction is fundamental to programming and computational thinking. It allows us to conceptualize problems and solutions on different levels, from the concrete to the theoretical, enhancing our ability to design and implement effective algorithms and software solutions.

* Elements of Programming
Every powerful language has 3 mechanisms for combining simple ideas to form complex ones:

1. "primitive expressions": which represent the simplest entities the language is concerned with
2. "means of combination": by which compound elements are built from simpler ones, and
3. "means of abstraction": by which compound elements can be named and manipulated as units.

** Javascript Primitives and Variables

- Variables are the simplest form of abstraction and also depend on the notion of an environment
- The primitive data types in JavaScript are:
  - =string=
  - =number=
  - =bigint=
  - =boolean=
  - =undefined=
  - =symbol=
  - =null=

#+begin_src js
  let num = 42 // A primitive expression representing a number
  let txt = "Hola Mundo!" // A primitive expression representing a string
  let iLoveJS = true // A primitive expression representing a boolean
  let nothing = null  // A primitive expression representing null
#+end_src

** JS Means of Combinations
Means of Combination in JavaScript: This concept refers to the construction of complex data types and structures from simpler ones:
- Numeric Combination: Uses arithmetic operators to compute new numbers from existing number or bigint values.
- String Combination: Employs the + operator to concatenate string types, facilitating dynamic text generation.
- Array Combination: Utilizes square brackets [ ] to group values into an array, aiding in list management and data organization.
- Object Combination: Creates objects with curly braces { }, combining diverse data types into structured entities, essential for modeling complex information.
#+begin_src js
  let sum = 10 + 32; // Combines two numbers into a new number
  let greeting = "Hi, " + "Alice"; // Combines two strings into a new string
  let coordinates = [40.7128, -74.0060]; // Combines numbers into an array
  let person = {name: "Bob", age: 25}; // Combines strings and numbers into an object
#+end_src
